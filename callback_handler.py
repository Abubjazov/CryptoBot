"""–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Callback'–æ–≤"""
import datetime
import pytz
from telegram import Update, ParseMode
from telegram.ext import CallbackContext

import inline_keyboards
from coins_api import BittrexClient

client = BittrexClient()


def get_now_formatted() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç—Ä–æ–∫–æ–π"""
    return get_now_datetime().strftime("%Y-%m-%d %H:%M:%S")


def get_now_datetime() -> datetime.datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π datetime —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–Ω–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ú—Å–∫."""
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.datetime.now(tz)
    return now


def callback_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Callback'–æ–≤"""
    callback_data = update.callback_query.data

    if callback_data in (inline_keyboards.CALLBACK_BTC, inline_keyboards.CALLBACK_LTC, inline_keyboards.CALLBACK_ETH,
                         inline_keyboards.CALLBACK_DOGE, inline_keyboards.CALLBACK_ADA, inline_keyboards.CALLBACK_BCH):
        pair = {
            inline_keyboards.CALLBACK_BTC: 'USD-BTC',
            inline_keyboards.CALLBACK_LTC: 'USD-LTC',
            inline_keyboards.CALLBACK_ETH: 'USD-ETH',
            inline_keyboards.CALLBACK_DOGE: 'USD-DOGE',
            inline_keyboards.CALLBACK_ADA: 'USD-ADA',
            inline_keyboards.CALLBACK_BCH: 'USD-BCH'
        }[callback_data]  # –≤—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä—É

        current_price = client.get_last_price(pair=pair)  # —É–∑–Ω–∞—ë–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø–∞—Ä—ã
        now = get_now_formatted()  # —É–∑–Ω–∞—ë–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        text = f'–ü–∞—Ä–∞ {pair}\n\n –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ—Ä–≥—É–µ—Ç—Å—è –ø–æ —Ü–µ–Ω–µ \n\n {current_price} USD \n\n{now}'

        if callback_data in (inline_keyboards.CALLBACK_BTC, inline_keyboards.CALLBACK_LTC, inline_keyboards.CALLBACK_ETH):
            update.effective_message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=inline_keyboards.get_inline_keyboard_1()  # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Ññ1
                                                                       # –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–∑ –µ—ë —Å–æ—Å—Ç–∞–≤–∞
            )

        else:
            update.effective_message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=inline_keyboards.get_inline_keyboard_2()  # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Ññ2
                                                                       # –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–∑ –µ—ë —Å–æ—Å—Ç–∞–≤–∞
            )

    elif callback_data == inline_keyboards.CALLBACK_MORE:  # –∑–∞–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Ññ1 –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Ññ2
        text = update.effective_message.text
        update.effective_message.edit_text(
            text=text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=inline_keyboards.get_inline_keyboard_2()
        )

    elif callback_data == inline_keyboards.CALLBACK_BACK:  # –∑–∞–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Ññ2 –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Ññ1
        text = update.effective_message.text
        update.effective_message.edit_text(
            text=text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=inline_keyboards.get_inline_keyboard_1()
        )

    else:
        update.effective_message.edit_text(                 # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏–ª–µ—Ç–∏—Ç —á—Ç–æ —Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ
            text='–ü–æ—Ö–æ–∂–µ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... üòÖ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=inline_keyboards.get_inline_keyboard_1()
        )
